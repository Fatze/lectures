2. Причины возникновения NoSQL движения.

Для понимания природы NoSQL наиболее важными представляются
следующие причины (debatable)

- недостатки реляционных систем
- решение задач обработки данных на которые реляционные, объектные
и XML системы не были рассчитаны
- реструктуризация IT рынка

Остановимся на этих причинах подробнее. 

2a. Недостатки реляционных систем

Недостатки реляционных систем - бурная тема для обсуждений начиная с начала
1990х годов  - достаточно вспомнить Object-Oriented Database System
manifesto by Atkinson et al, и Third Manifesto by Date/Darwin. Это и
несоответствие реляционной модели модели объектно-ориентированной (так
называемый object-relational impedance mismatch), и недостаточная
"реляционность" языка SQL, и "ориентированность" стандарта SQL во 
множестве аспектов (уровни изоляции транзакций, APIs, Unicode support, 
object extentions, и пр. пр.) на интересы одного вендора.

Но, как показывает судьба объектных систем, эти недостатки оказались явно
недостаточны для того чтобы свергнуть SQL и реляционные системы с позиции
лидерства в индустрии СУБД. В самом деле, многие популярные объектные
системыиз 90х, такие как InterSystems Cache позиционируют себя сейчас как
NoSQL решения, и имеют лишь нишевые применения, такие как ИТМ
(информационные технологии в медицине).

Более критичными аспектами реляционных систем (но не всегда реляционной
модели!) принято считать следующее:

- rigidity of schema design and change.  Реляционные системы зародились во
времена доминирования waterfall model в инженерии ПО, т.е. рассчитывались на
тщательную проработку каждого аспекта функционирования системмы. Одним из
таких аспектов был изменение схемы данных. Область применения реляционных
систем, таких как banking, часто предполагала возможность частичного
downtime, то есть задача online schema change не стояла остро до 2000х гг. и
начала применения реляционных баз в веб проектах.

- архитектура вертикального масштабирования. Большая часть реляционных
систем, опять же, были рассчитаны на клиент-серверное применение с
вертикальным масштабированием серверных мощностей. MySQL, как первая
система поддерживающая репликацию и горизонтальноое масштабирование 
получила широкое распространение в мире Web именно благодаря этому.

Радикальные изменения в архитектуре аппаратного обеспечения обогнали
продукты СУБД на два поколения: процессы сменились тредами, а модель
тредов и критических секций, в свою очередь, lock-free структурами данных.
"Типичный процессор для СУБД", в свою очередь, сменился на кластер
однотипных машин с малым числом процессоров, а кластер машин с малым числом процессоров - кластером машин с 24-100 процессорами на каждой.
Таким образом, производительность РСУБД даже на single-server
системе стала неадекватной (performance of a single server problem).

Фактически, в силу радикального изменения как оборудования так и 
*начальных* требований к возможностям СУБД в 2000х открылось "окно"
в результате которого на рынок получило возможность выйти множество
систем.

- неготовность к горизонтальному масштабированию (scale-out data) 
- как с точки зрения традиционной теории нормализации (и как следствии
необходимости во вторичных ключах, которые не шардятся), так и вследствие
неготовности к задачам нового рынка, так и вследствие наследия
клиент-серверной архитектуры, с централизованной обработкой запросов на
сервере и простым клиентом. (Для эффективной реализации шардинга и
распределённых запросов необходим "умный" клиент).  Подробнее этот момент
станет понятен после обсуждения моделей данных NoSQL СУБД

Однако не стоит переоценивать проблему горизонтального масштабирования: 
масштабироваться дожно веб приложение, что не всегда означает
необходимость масштабирования на уровне СУБД

2b. Новые задачи возникшие перед СУБД

Доступность оборудования для хранения дала возможность
в коммерческих целях хранить и обрабатывать совершенно
иные объёмы данных, объёмы недоступные ни одной вертикально
масштабируемой системе. Для сравнения, 

Эти задачи можно в целом обозначить как задачи Big Data,
характеризуемые 3мя V- velocity, variety, volume

Здесь роль также сыграла закрытость большинства коммерческих продуктов. 
Бизнес модель большинства интернет-компаний не позволяет иметь
лицензионные отчисления per cpu/per code/per node - часто для простейшего
с минимальной прибыльностью необходимо использовать десятки и сотни узлов.
таким образом, выбор мог быть осуществлён только среди открытых систем
(MySQL, PostgreSQL), которые мгновенно были "захлёстнуты" волной
интереса, ни одна из которых не была приспособлена к
горизонтальному масштабированию.

Также следует упомянуть что SQL системы, созданные в первую очередь
для обработки финансовых транзакций и поддержки accounting
не были рассчитаны на Amazon Shopping Basket сценарий, когда 
Availability goes before Consistency или необходима отказоустойчивая
работа в условиях геораспределённого data center.

Таким образом возникли движения 2b.1. Big Data, Eventual consistency
(Amazon Shopping Basket), нишевые применения (Graph databases).

Efficiency : The system needs to function on a commodity hardware
infrastructure. In Am azon’s platform, services have stringent latency requi
rements which are in general measured at the 99.9 th percentile of the
distribution. Given that state access plays a crucial role in service
operation the storage system must be capable of meeting such stringent SLAs
(see

2c. Рынок применения СУБД значительно расшириллся. Фактически, в 2013 
СПО обязано быть СПО - системное программное обеспечение обязано быть 
свободным, чтобы снискать минимальную популярность и получить рынок.
Парадигма отношения к СУБД как к сложному системному продукту разрабатываемому по принципам "one size fits all", сменилась на парадигму 
polyglot persistence - когда для решения каждой задачи хранения данных
выбирается наиболее подходящий под эту задачу инструмент.

Надо понимать что при наличии NoSQL движения, многие крупные компании
по-прежнему успешно используют MySQL и др. реляционные СУБД как
своё основное хранилище (Facebook, Badoo, много -Google, even Amazon
for many parts of its infrastructure)

При анализе причин возникновения NoSQL не следует забывать
также исторические факторы.

